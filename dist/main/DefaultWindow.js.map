{"version":3,"sources":["main/DefaultWindow.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,6BAA6B;AAE7B,iDAAoF;AAEpF,8CAA8C;AAC9C,kDAAkD;AAClD,6DAA6D;AAC7D,4CAA4C;AAG5C,mBACC,SAAQ,kCAAkB;IAE1B,YAAY,IAAY;QACvB,KAAK,CAAC,IAAI,EAAE;YACX,kBAAkB,EAAE,KAAK;YACzB,eAAe,EAAE,IAAI;YACrB,UAAU,EAAE,KAAK;YACjB,cAAc,EAAE;gBACf,oHAAoH;gBACpH,WAAW,EAAE,KAAK,CAAC,6BAA6B;aAChD;SACD,CAAC,CAAC;IAEJ,CAAC;IAED;;OAEG;IACI,KAAK;QAEX,IAAI,CAAC,MAAM,EAAE,CAAC;QAEf,yCAAyC;IACzC,CAAC;IAEM,QAAQ;QACd,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM;YAC1C,uDAAuD;YACvD,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,aAAa,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,IAAI;gBACvE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,MAAM,CAAC;gBACR,CAAC;gBACD,OAAO,CAAC,IAAI,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,YAAY;QAClB,MAAM,CAAC,qFAAqF,CAAC;IAC9F,CAAC;IAEO,MAAM;QACb,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACxB,uCAAuC;YACxC,2BAA2B;YAC3B,mCAAmC;YACnC,qBAAqB;YACrB,uBAAuB;YACvB,gDAAgD;YAChD,OAAO;YACP,qBAAqB;YACrB,WAAW;YACX,6BAA6B;YAE7B,uEAAuE;YACtE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAC7B,6EAA6E;YAC7E,yGAAyG;YACzG,IAAI;QACL,CAAC;IACA,CAAC;CACD;AA/DF,sCA+DE","file":"DefaultWindow.js","sourcesContent":["import * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport { ElectronWindowBase, BrowserWindowConstructorOptions } from 'electron-base';\r\n\r\n// This import is for TypeScript typing only, \r\n// this line will be removed from output .js file,\r\n// hence the script in app.ts is not executed by this import.\r\n//import { ElectronSampleApp } from './app';\r\n\r\n\r\nexport class DefaultWindow \r\n\textends ElectronWindowBase {\r\n\r\n\tconstructor(name: string) {\r\n\t\tsuper(name, {\r\n\t\t\ttriggerGlobalClose: false,\r\n\t\t\tautoHideMenuBar: true,\r\n\t\t\tfullscreen: false,\r\n\t\t\twebPreferences: {\r\n\t\t\t\t//nodeIntegration: true, // If `false`, only web JS functionalities are available. NodeJS features will be disabled.\r\n\t\t\t\twebSecurity: false // Disable same-origin policy\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tpublic start(): void {\r\n\t\t\r\n\t\tthis.render();\r\n\r\n\t//\tlet app = <ElectronSampleApp>this.app;\r\n\t}\r\n\r\n\tpublic readFile(): Promise<string> {\r\n\t\treturn new Promise<string>((resolve, reject) => {\r\n\t\t\t// Let `path.join` decide \"/\" (Linux) or \"\\\" (Windows).\r\n\t\t\tfs.readFile(path.join(global.appRoot, 'example.txt'), 'utf8', (err, text) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tresolve(text);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tpublic saySomething(): string {\r\n\t\treturn 'Only serializable JSON objects can only be passed with properties of primary types.';\r\n\t}\r\n\r\n\tprivate render(): void {\r\n\t\tif (this.app.isDebug()) {\r\n\t\t\t//Load view after dev tools has opened.\r\n\t\t// \tthis.native.webContents\r\n\t\t// \t\t.on('devtools-opened', () => {\r\n\t\t// \t\t\t// Clear cache.\r\n\t\t// \t\t\tthis.clearCache()\r\n\t\t// \t\t\t\t.then(() => this.loadView('index.html'));\r\n\t\t// \t\t})\r\n\t\t// \t\t.openDevTools();\r\n\t\t// } else {\r\n\t\t// \tthis.setFullScreen(true);\r\n\r\n\t\t// \t// Same with: this.loadURL(`${global.appRoot}/views/default.html`);\r\n\t\t\tthis.loadView('index.html');\r\n\t\t// \t// Change view location: this._viewRoot = `${global.appRoot}/new-views/`;\r\n\t\t// \t// this.loadView('default.html') same with: this.loadURL(`${global.appRoot}/new-views/default.html`);\r\n\t\t// }\r\n\t}\r\n\t\t}\r\n\t}"]}